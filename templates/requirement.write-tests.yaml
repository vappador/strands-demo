id: SD-TESTS-001
title: "Add initial test suite for strands-demo"
language: python

repo:
  url: "https://github.com/vappador/strands-demo"
  default_branch: "main"

branch:
  feature_id: "sd-tests-001"           # final branch name will be "feature/sd-tests-001"

build:
  container_image: "strands/polytest:latest"
  workdir: "/workspace/repo"
  command: |
    bash -lc '
      set -e
      if [ -f requirements.txt ] || [ -f pyproject.toml ]; then
        python -m pip install -U pip setuptools wheel
        [ -f requirements.txt ] && pip install -r requirements.txt || true
        [ -f pyproject.toml ] && pip install . || true
      fi

      if [ -f package.json ]; then
        corepack enable
        # prefer pnpm if lockfile exists, else npm
        if [ -f pnpm-lock.yaml ]; then pnpm install; elif [ -f yarn.lock ]; then yarn install; else npm ci || npm install; fi
      fi

      if [ -f pom.xml ]; then mvn -q -DskipTests=false test; fi
      if [ -f build.gradle ] || [ -f build.gradle.kts ]; then gradle test; fi

      if [ -d tests ] || [ -f pytest.ini ] || [ -f pyproject.toml ]; then pytest -q --maxfail=1 -vv || true; fi
      if [ -f package.json ]; then
        # try common JS/TS test scripts, but don’t fail build if they’re absent
        npm run test || npm test || true
        pnpm test || true
        yarn test || true
      fi
    '
  env:
    PYTHONUNBUFFERED: "1"
  timeout_seconds: 900

github:
  create_pr: true
  base: "main"
  reviewers: []
  labels: ["tests", "automation"]
  draft: false

codegen:
  description: |
    Create a minimal pytest suite for the FastAPI app in this repository.
    Include:
    - Test that GET /health returns 200 and {"ok": true}.
    - Smoke test for POST /run with a sample requirement_source; ensure it accepts input
      and returns a JSON body with a "status" field. Do NOT perform real network or GitHub calls;
      keep side effects mocked or avoided.
    - Repo layout sanity check: assert presence of Dockerfile, docker-compose.yml, and
      requirements.txt or pyproject.toml.
    Keep changes small and idiomatic. Ensure tests run in the specified Docker image.
  test_expectations:
    - "pytest exit code is 0"
    - "health endpoint returns ok"
    - "run endpoint accepts requirement_source"
    - "repo layout files exist"